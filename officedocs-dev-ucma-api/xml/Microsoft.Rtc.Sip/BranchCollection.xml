<Type Name="BranchCollection" FullName="Microsoft.Rtc.Sip.BranchCollection">
  <TypeSignature Language="C#" Value="public sealed class BranchCollection : System.Collections.IEnumerable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit BranchCollection extends System.Object implements class System.Collections.IEnumerable" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Rtc.Sip.BranchCollection" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class BranchCollection&#xA;Implements IEnumerable" />
  <TypeSignature Language="C++ CLI" Value="public ref class BranchCollection sealed : System::Collections::IEnumerable" />
  <AssemblyInfo>
    <AssemblyName>ServerAgent</AssemblyName>
    <AssemblyVersion>7.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.IEnumerable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>The BranchCollection class represents an unordered collection of client transactions (branches) that are associated with a server transaction. Each client transaction is represented as a <see cref="T:Microsoft.Rtc.Sip.ClientTransaction" /> object, and can be obtained through the IEnumerator interface that is returned by the <see cref="M:Microsoft.Rtc.Sip.BranchCollection.GetEnumerator" /> method.A BranchCollection object is obtained by referencing the <see cref="P:Microsoft.Rtc.Sip.ServerTransaction.Branches" /> property, which contains all of the client transactions that are defined for that server transaction.This class implements the IEnumerable interface.The BranchCollection class is derived from the System.Object class.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Rtc.Sip.BranchCollection.Count" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Count As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Count { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>ServerAgent</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The Count property contains the total number of elements in the <see cref="T:Microsoft.Rtc.Sip.BranchCollection" />.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Collections.IEnumerator GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.IEnumerator GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Rtc.Sip.BranchCollection.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnumerator () As IEnumerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Collections::IEnumerator ^ GetEnumerator();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerable.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>ServerAgent</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>The GetEnumerator method obtains an IEnumerator interface that is used for iterating through the branch collection.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>The IEnumerator interface provides a method, IEnumerator.MoveNext(), which allows the caller to increment forward through the collection. To return to the start of the collection, call IEnumerator.Reset(). The current branch element can be obtained with the IEnumerator.Current property, which returns the element as an object that must be recast as a <see cref="T:Microsoft.Rtc.Sip.ClientTransaction" /> type.</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsEmpty">
      <MemberSignature Language="C#" Value="public bool IsEmpty { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEmpty" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Rtc.Sip.BranchCollection.IsEmpty" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsEmpty As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsEmpty { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>ServerAgent</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The IsEmpty property indicates whether the <see cref="T:Microsoft.Rtc.Sip.BranchCollection" /> object is empty (has no elements).</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>