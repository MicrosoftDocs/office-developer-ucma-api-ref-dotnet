<Type Name="SpeechRecognitionConnector" FullName="Microsoft.Rtc.Collaboration.AudioVideo.SpeechRecognitionConnector">
  <TypeSignature Language="C#" Value="public class SpeechRecognitionConnector : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit SpeechRecognitionConnector extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Rtc.Collaboration.AudioVideo.SpeechRecognitionConnector" />
  <TypeSignature Language="VB.NET" Value="Public Class SpeechRecognitionConnector&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class SpeechRecognitionConnector : IDisposable" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Rtc.Collaboration</AssemblyName>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
            SpeechRecognitionConnector can be bound to an AudioVideoFlow, and provides a stream of audio data compatible with Microsoft.Speech.
            </summary>
    <remarks>
      <para>One such stream is provided every time Start() is called on the SpeechRecognitionConnector.  The stream will contain
            the audio up to the point at which Stop() is called on the connector.  Calling Start() again will then generate a new
            stream for the new interval, and so on.</para>
      <para>SpeechSynthesisConnector should be used only in conjuction with Microsoft.Speech.</para>
      <para />
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SpeechRecognitionConnector ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Rtc.Collaboration.AudioVideo.SpeechRecognitionConnector.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SpeechRecognitionConnector();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Rtc.Collaboration</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
            Creates a new instance of the SpeechRecognitionConnector class.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AttachFlow">
      <MemberSignature Language="C#" Value="public void AttachFlow (Microsoft.Rtc.Collaboration.AudioVideo.AudioVideoFlow audioVideoFlow);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AttachFlow(class Microsoft.Rtc.Collaboration.AudioVideo.AudioVideoFlow audioVideoFlow) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Rtc.Collaboration.AudioVideo.SpeechRecognitionConnector.AttachFlow(Microsoft.Rtc.Collaboration.AudioVideo.AudioVideoFlow)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AttachFlow(Microsoft::Rtc::Collaboration::AudioVideo::AudioVideoFlow ^ audioVideoFlow);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Rtc.Collaboration</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="audioVideoFlow" Type="Microsoft.Rtc.Collaboration.AudioVideo.AudioVideoFlow" />
      </Parameters>
      <Docs>
        <param name="audioVideoFlow">The AudioVideoFlow to use</param>
        <summary>
            Specifies which AudioVideoFlow will provide audio data for speech recognition.
            Only one AudioVideoFlow may be attached at a time.
            </summary>
        <remarks>To be added.</remarks>
        <example>
          <para />
          <para>
            The following example attaches and detaches a ToneController by the time AudioVideoFlow changes its state to Active and Terminated.
                </para>
          <para> C# Attaching and detaching an AudioVideoFlow.</para>
          <code> 

            audioVideoFlow.StateChanged += delegate(object sender, MediaFlowStateChangedEventArgs args)
            {
                AudioVideoFlow avFlow = (AudioVideoFlow)sender;

                if(avFlow.State == MediaFlowState.Active)
                {

                    SpeechRecognitionConnector speechRecognitionConnector = new SpeechRecognitionConnector();
                    speechRecognitionConnector.AttachFlow(avFlow);

                }
                else if(avFlow.State == MediaFlowState.Terminated)
                {

                    if (avFlow.SpeechRecognitionConnector != null)
                    {
                        avFlow.SpeechRecognitionConnector.DetachFlow();
                    }

                }
            };


</code>
        </example>
        <exception cref="T:System.InvalidOperationException">Thrown when an AudioVideoFlow is already attached or when an AudioVideoFlow is already attached to another SpeechRecognitionConnector.</exception>
      </Docs>
    </Member>
    <Member MemberName="AudioVideoFlow">
      <MemberSignature Language="C#" Value="public Microsoft.Rtc.Collaboration.AudioVideo.AudioVideoFlow AudioVideoFlow { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Rtc.Collaboration.AudioVideo.AudioVideoFlow AudioVideoFlow" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Rtc.Collaboration.AudioVideo.SpeechRecognitionConnector.AudioVideoFlow" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AudioVideoFlow As AudioVideoFlow" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Rtc::Collaboration::AudioVideo::AudioVideoFlow ^ AudioVideoFlow { Microsoft::Rtc::Collaboration::AudioVideo::AudioVideoFlow ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Rtc.Collaboration</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Rtc.Collaboration.AudioVideo.AudioVideoFlow</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the attached AudioVideoFlow.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DetachFlow">
      <MemberSignature Language="C#" Value="public void DetachFlow ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DetachFlow() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Rtc.Collaboration.AudioVideo.SpeechRecognitionConnector.DetachFlow" />
      <MemberSignature Language="VB.NET" Value="Public Sub DetachFlow ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DetachFlow();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Rtc.Collaboration</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Detachs the current AudioVideoFlow, freeing the connector to use another.
            </summary>
        <remarks>
          <para>Will NO-OP if no flow is attached.</para>
          <para />
        </remarks>
        <example>
          <para />
          <para>
            The following example attaches and detaches a SpeechRecognizerConnector by the time AudioVideoFlow changes its state to Active and Terminated.
                </para>
          <para> C# Attaching and detaching an AudioVideoFlow.</para>
          <code> 

            audioVideoFlow.StateChanged += delegate(object sender, MediaFlowStateChangedEventArgs args)
            {
                AudioVideoFlow avFlow = (AudioVideoFlow)sender;

                if(avFlow.State == MediaFlowState.Active)
                {

                    SpeechRecognitionConnector speechRecognitionConnector = new SpeechRecognitionConnector();
                    speechRecognitionConnector.AttachFlow(avFlow);

                }
                else if(avFlow.State == MediaFlowState.Terminated)
                {

                    if (avFlow.SpeechRecognitionConnector != null)
                    {
                        avFlow.SpeechRecognitionConnector.DetachFlow();
                    }

                }
            };


</code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Rtc.Collaboration.AudioVideo.SpeechRecognitionConnector.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Rtc.Collaboration</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Disposes the SpeechRecognitionConnector.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsActive">
      <MemberSignature Language="C#" Value="public bool IsActive { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsActive" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Rtc.Collaboration.AudioVideo.SpeechRecognitionConnector.IsActive" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsActive As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsActive { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Rtc.Collaboration</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets whether the SpeechRecognitionConnector is currently running.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Start">
      <MemberSignature Language="C#" Value="public Microsoft.Rtc.Collaboration.AudioVideo.SpeechRecognitionStream Start ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.Rtc.Collaboration.AudioVideo.SpeechRecognitionStream Start() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Rtc.Collaboration.AudioVideo.SpeechRecognitionConnector.Start" />
      <MemberSignature Language="VB.NET" Value="Public Function Start () As SpeechRecognitionStream" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::Rtc::Collaboration::AudioVideo::SpeechRecognitionStream ^ Start();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Rtc.Collaboration</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Rtc.Collaboration.AudioVideo.SpeechRecognitionStream</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Begins recording audio into a new stream.
            The caller is responsible for disposing of the stream returned by this method.
            </summary>
        <returns>A stream containing audio data.</returns>
        <remarks>To be added.</remarks>
        <example>
          <para />
          <para>
            The following example starts the SpeechSynthesizerConnector.  
                </para>
          <para> C# Starting and stopping a SpeechSynthesizerConnector.</para>
          <code> 

            speechRecognitionConnector.AttachFlow(audioVideoFlow);
            SpeechRecognitionStream stream = speechRecognitionConnector.Start();

            // stream needs to be set to Microsoft.Speech.SpeechRecognition



</code>
        </example>
        <exception cref="T:System.InvalidOperationException">Thrown when the SpeechRecognitionConnector is not bound to an AudioVideoFlow, or when the SpeechRecognitionConnector is already started.</exception>
      </Docs>
    </Member>
    <Member MemberName="Stop">
      <MemberSignature Language="C#" Value="public void Stop ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Stop() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Rtc.Collaboration.AudioVideo.SpeechRecognitionConnector.Stop" />
      <MemberSignature Language="VB.NET" Value="Public Sub Stop ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Stop();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Rtc.Collaboration</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Caps off the current stream, and stop recording audio.
            Will no-op if the SpeechRecognitionConnector is already stopped.
            </summary>
        <remarks>
          <para>
            Also releases the receiver, so that another device can use the AudioVideoFlow.
            </para>
          <para />
        </remarks>
        <example>
          <para />
          <para>
            The following example starts and stops the SpeechSynthesizerConnector.  
                </para>
          <para> C# Starting and stopping a SpeechSynthesizerConnector.</para>
          <code> 

            speechRecognitionConnector.AttachFlow(audioVideoFlow);
            SpeechRecognitionStream stream = speechRecognitionConnector.Start();

            // stream needs to be set to Microsoft.Speech.SpeechRecognition



            speechRecognitionConnector.Stop();



</code>
        </example>
      </Docs>
    </Member>
  </Members>
</Type>