<Type Name="CallReceivedEventArgs&lt;TCall&gt;" FullName="Microsoft.Rtc.Collaboration.CallReceivedEventArgs&lt;TCall&gt;">
  <TypeSignature Language="C#" Value="public class CallReceivedEventArgs&lt;TCall&gt; : Microsoft.Rtc.Collaboration.CallReceivedEventArgsBase where TCall : Call" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit CallReceivedEventArgs`1&lt;(class Microsoft.Rtc.Collaboration.Call) TCall&gt; extends Microsoft.Rtc.Collaboration.CallReceivedEventArgsBase" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Rtc.Collaboration.CallReceivedEventArgs`1" />
  <TypeSignature Language="VB.NET" Value="Public Class CallReceivedEventArgs(Of TCall)&#xA;Inherits CallReceivedEventArgsBase" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename TCall&gt;&#xA; where TCall : Callpublic ref class CallReceivedEventArgs : Microsoft::Rtc::Collaboration::CallReceivedEventArgsBase" />
  <TypeSignature Language="F#" Value="type CallReceivedEventArgs&lt;'Call (requires 'Call :&gt; Call)&gt; = class&#xA;    inherit CallReceivedEventArgsBase" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Rtc.Collaboration</AssemblyName>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TCall">
      <Constraints>
        <BaseTypeName>Microsoft.Rtc.Collaboration.Call</BaseTypeName>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>Microsoft.Rtc.Collaboration.CallReceivedEventArgsBase</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <typeparam name="TCall">The call type.</typeparam>
    <summary>
            Contains information regarding an incoming call. 
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="Call">
      <MemberSignature Language="C#" Value="public TCall Call { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !TCall Call" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Rtc.Collaboration.CallReceivedEventArgs`1.Call" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Call As TCall" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TCall Call { TCall get(); };" />
      <MemberSignature Language="F#" Value="member this.Call : 'Call" Usage="Microsoft.Rtc.Collaboration.CallReceivedEventArgs&lt;'Call (requires 'Call :&gt; Microsoft.Rtc.Collaboration.Call)&gt;.Call" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Rtc.Collaboration</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TCall</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the incoming call.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CallToBeReplaced">
      <MemberSignature Language="C#" Value="public TCall CallToBeReplaced { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !TCall CallToBeReplaced" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Rtc.Collaboration.CallReceivedEventArgs`1.CallToBeReplaced" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CallToBeReplaced As TCall" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TCall CallToBeReplaced { TCall get(); };" />
      <MemberSignature Language="F#" Value="member this.CallToBeReplaced : 'Call" Usage="Microsoft.Rtc.Collaboration.CallReceivedEventArgs&lt;'Call (requires 'Call :&gt; Microsoft.Rtc.Collaboration.Call)&gt;.CallToBeReplaced" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Rtc.Collaboration</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TCall</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the call to be replaced if the incoming INVITE message has a Replaces header.
            </summary>
        <value>The call to be replaced.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>