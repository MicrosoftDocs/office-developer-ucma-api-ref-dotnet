<Type Name="SipPeerToPeerEndpoint" FullName="Microsoft.Rtc.Signaling.SipPeerToPeerEndpoint">
  <TypeSignature Language="C#" Value="public class SipPeerToPeerEndpoint : Microsoft.Rtc.Signaling.RealTimeEndpoint" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit SipPeerToPeerEndpoint extends Microsoft.Rtc.Signaling.RealTimeEndpoint" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Rtc.Signaling.SipPeerToPeerEndpoint" />
  <TypeSignature Language="VB.NET" Value="Public Class SipPeerToPeerEndpoint&#xA;Inherits RealTimeEndpoint" />
  <TypeSignature Language="C++ CLI" Value="public ref class SipPeerToPeerEndpoint : Microsoft::Rtc::Signaling::RealTimeEndpoint" />
  <TypeSignature Language="F#" Value="type SipPeerToPeerEndpoint = class&#xA;    inherit RealTimeEndpoint" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Rtc.Collaboration</AssemblyName>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Microsoft.Rtc.Signaling.RealTimeEndpoint</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            Represents an endpoint with no registration server. 
            </summary>
    <remarks>
      <para>
            This endpoint can communicate with other endpoints directly or through a configured
            outbound proxy server. This endpoint does not support register or user authentication.
            This endpoint should be enabled for listening using the connection manager to allow others to connect.
            If the endpoint is used only for outgoing messages, then there is no need for listening.
            </para>
      <para />
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SipPeerToPeerEndpoint ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Rtc.Signaling.SipPeerToPeerEndpoint.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SipPeerToPeerEndpoint();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Rtc.Collaboration</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("This constructor is obsolete. Please create a ownerUri and ConnectionManager and use another overload.")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>
            Initializes a new instance of the SipPeerToPeerEndpoint class. 
            </summary>
        <remarks>
          <para>
            The URI for the endpoint defaults to local host. 
            To enable listening, use StartListening(ipEndpoint) in the ConnectionManager property.
            The use of this constructor creates its own instance of the SIP stack needed to support
            this endpoint. Since the creation of Sip Stack is memory consuming, it is not recommended to 
            create too many instances (&gt; 10) of endpoint using this constructor. 
            </para>
          <para />
        </remarks>
        <exception cref="T:Microsoft.Rtc.Signaling.RealTimeException">
            Thrown when the local host name cannot be retrieved.
            </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SipPeerToPeerEndpoint (string ownerUri);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string ownerUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Rtc.Signaling.SipPeerToPeerEndpoint.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (ownerUri As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SipPeerToPeerEndpoint(System::String ^ ownerUri);" />
      <MemberSignature Language="F#" Value="new Microsoft.Rtc.Signaling.SipPeerToPeerEndpoint : string -&gt; Microsoft.Rtc.Signaling.SipPeerToPeerEndpoint" Usage="new Microsoft.Rtc.Signaling.SipPeerToPeerEndpoint ownerUri" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Rtc.Collaboration</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("This constructor is obsolete. Please create a ConnectionManager and use another overload.")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="ownerUri" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="ownerUri">
            The URI for this endpoint. This should not include port. Port will be 
            automatically added depending on the listening port, if any.
            </param>
        <summary>
            Initializes a new instance of the SipPeerToPeerEndpoint class with the given URI.
            To enable listening, use StartListening(ipEndpoint) in the ConnectionManager property.
            </summary>
        <remarks>
          <para>The use of this constructor creates its own instance of the SIP stack needed to support
            this endpoint. Since the creation is Sip Stack is memory consuming, it is not recommended to 
            create too many instances (&gt; 10) of endpoint using this ctor. 
            </para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SipPeerToPeerEndpoint (string ownerUri, Microsoft.Rtc.Signaling.RealTimeServerConnectionManager connectionManager);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string ownerUri, class Microsoft.Rtc.Signaling.RealTimeServerConnectionManager connectionManager) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Rtc.Signaling.SipPeerToPeerEndpoint.#ctor(System.String,Microsoft.Rtc.Signaling.RealTimeServerConnectionManager)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (ownerUri As String, connectionManager As RealTimeServerConnectionManager)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SipPeerToPeerEndpoint(System::String ^ ownerUri, Microsoft::Rtc::Signaling::RealTimeServerConnectionManager ^ connectionManager);" />
      <MemberSignature Language="F#" Value="new Microsoft.Rtc.Signaling.SipPeerToPeerEndpoint : string * Microsoft.Rtc.Signaling.RealTimeServerConnectionManager -&gt; Microsoft.Rtc.Signaling.SipPeerToPeerEndpoint" Usage="new Microsoft.Rtc.Signaling.SipPeerToPeerEndpoint (ownerUri, connectionManager)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Rtc.Collaboration</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="ownerUri" Type="System.String" />
        <Parameter Name="connectionManager" Type="Microsoft.Rtc.Signaling.RealTimeServerConnectionManager" />
      </Parameters>
      <Docs>
        <param name="ownerUri">
            The URI for this endpoint. This should not include port. Port will be 
            automatically added depending on the listening port, if any.
            </param>
        <param name="connectionManager">
            The connection manager to use for this endpoint. 
            </param>
        <summary>
            Initializes a new instance of the SipPeerToPeerEndpoint class.  
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SipPeerToPeerEndpoint (string ownerUri, Microsoft.Rtc.Signaling.RealTimeServerConnectionManager connectionManager, Microsoft.Rtc.Signaling.SipPeerToPeerEndpointSettings settings);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string ownerUri, class Microsoft.Rtc.Signaling.RealTimeServerConnectionManager connectionManager, class Microsoft.Rtc.Signaling.SipPeerToPeerEndpointSettings settings) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Rtc.Signaling.SipPeerToPeerEndpoint.#ctor(System.String,Microsoft.Rtc.Signaling.RealTimeServerConnectionManager,Microsoft.Rtc.Signaling.SipPeerToPeerEndpointSettings)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (ownerUri As String, connectionManager As RealTimeServerConnectionManager, settings As SipPeerToPeerEndpointSettings)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SipPeerToPeerEndpoint(System::String ^ ownerUri, Microsoft::Rtc::Signaling::RealTimeServerConnectionManager ^ connectionManager, Microsoft::Rtc::Signaling::SipPeerToPeerEndpointSettings ^ settings);" />
      <MemberSignature Language="F#" Value="new Microsoft.Rtc.Signaling.SipPeerToPeerEndpoint : string * Microsoft.Rtc.Signaling.RealTimeServerConnectionManager * Microsoft.Rtc.Signaling.SipPeerToPeerEndpointSettings -&gt; Microsoft.Rtc.Signaling.SipPeerToPeerEndpoint" Usage="new Microsoft.Rtc.Signaling.SipPeerToPeerEndpoint (ownerUri, connectionManager, settings)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Rtc.Collaboration</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="ownerUri" Type="System.String" />
        <Parameter Name="connectionManager" Type="Microsoft.Rtc.Signaling.RealTimeServerConnectionManager" />
        <Parameter Name="settings" Type="Microsoft.Rtc.Signaling.SipPeerToPeerEndpointSettings" />
      </Parameters>
      <Docs>
        <param name="ownerUri">
            The URI for this endpoint. This should not include port. Port will be 
            automatically added depending on the listening port, if any.
            </param>
        <param name="connectionManager">
            The connection manager to use for this endpoint. 
            </param>
        <param name="settings">Additional settings to configure the endpoint or null.</param>
        <summary>
            Initializes a new instance of the SipPeerToPeerEndpoint class.  
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SipPeerToPeerEndpoint (string ownerUri, Microsoft.Rtc.Signaling.RealTimeServerConnectionManager connectionManager, Microsoft.Rtc.Signaling.SipTransportType defaultTransportType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string ownerUri, class Microsoft.Rtc.Signaling.RealTimeServerConnectionManager connectionManager, valuetype Microsoft.Rtc.Signaling.SipTransportType defaultTransportType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Rtc.Signaling.SipPeerToPeerEndpoint.#ctor(System.String,Microsoft.Rtc.Signaling.RealTimeServerConnectionManager,Microsoft.Rtc.Signaling.SipTransportType)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (ownerUri As String, connectionManager As RealTimeServerConnectionManager, defaultTransportType As SipTransportType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SipPeerToPeerEndpoint(System::String ^ ownerUri, Microsoft::Rtc::Signaling::RealTimeServerConnectionManager ^ connectionManager, Microsoft::Rtc::Signaling::SipTransportType defaultTransportType);" />
      <MemberSignature Language="F#" Value="new Microsoft.Rtc.Signaling.SipPeerToPeerEndpoint : string * Microsoft.Rtc.Signaling.RealTimeServerConnectionManager * Microsoft.Rtc.Signaling.SipTransportType -&gt; Microsoft.Rtc.Signaling.SipPeerToPeerEndpoint" Usage="new Microsoft.Rtc.Signaling.SipPeerToPeerEndpoint (ownerUri, connectionManager, defaultTransportType)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Rtc.Collaboration</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="ownerUri" Type="System.String" />
        <Parameter Name="connectionManager" Type="Microsoft.Rtc.Signaling.RealTimeServerConnectionManager" />
        <Parameter Name="defaultTransportType" Type="Microsoft.Rtc.Signaling.SipTransportType" />
      </Parameters>
      <Docs>
        <param name="ownerUri">
            The URI for this endpoint. This should not include port. Port will be 
            automatically added depending on the listening port, if any.
            </param>
        <param name="connectionManager">
            The connection manager to use for this endpoint. 
            </param>
        <param name="defaultTransportType">
            The default transport for outgoing messages, if the application did not override the
            transport explicitly. For example, invite URI can have transport type to override this.
            </param>
        <summary>
            Initializes a new instance of the SipPeerToPeerEndpoint class.  
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SipPeerToPeerEndpoint (string ownerUri, Microsoft.Rtc.Signaling.RealTimeServerConnectionManager connectionManager, Microsoft.Rtc.Signaling.SipTransportType defaultTransportType, System.Collections.Generic.IEnumerable&lt;Microsoft.Rtc.Signaling.SignalingHeader&gt; additionalHeaders);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string ownerUri, class Microsoft.Rtc.Signaling.RealTimeServerConnectionManager connectionManager, valuetype Microsoft.Rtc.Signaling.SipTransportType defaultTransportType, class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.Rtc.Signaling.SignalingHeader&gt; additionalHeaders) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Rtc.Signaling.SipPeerToPeerEndpoint.#ctor(System.String,Microsoft.Rtc.Signaling.RealTimeServerConnectionManager,Microsoft.Rtc.Signaling.SipTransportType,System.Collections.Generic.IEnumerable{Microsoft.Rtc.Signaling.SignalingHeader})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (ownerUri As String, connectionManager As RealTimeServerConnectionManager, defaultTransportType As SipTransportType, additionalHeaders As IEnumerable(Of SignalingHeader))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SipPeerToPeerEndpoint(System::String ^ ownerUri, Microsoft::Rtc::Signaling::RealTimeServerConnectionManager ^ connectionManager, Microsoft::Rtc::Signaling::SipTransportType defaultTransportType, System::Collections::Generic::IEnumerable&lt;Microsoft::Rtc::Signaling::SignalingHeader ^&gt; ^ additionalHeaders);" />
      <MemberSignature Language="F#" Value="new Microsoft.Rtc.Signaling.SipPeerToPeerEndpoint : string * Microsoft.Rtc.Signaling.RealTimeServerConnectionManager * Microsoft.Rtc.Signaling.SipTransportType * seq&lt;Microsoft.Rtc.Signaling.SignalingHeader&gt; -&gt; Microsoft.Rtc.Signaling.SipPeerToPeerEndpoint" Usage="new Microsoft.Rtc.Signaling.SipPeerToPeerEndpoint (ownerUri, connectionManager, defaultTransportType, additionalHeaders)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Rtc.Collaboration</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="ownerUri" Type="System.String" />
        <Parameter Name="connectionManager" Type="Microsoft.Rtc.Signaling.RealTimeServerConnectionManager" />
        <Parameter Name="defaultTransportType" Type="Microsoft.Rtc.Signaling.SipTransportType" />
        <Parameter Name="additionalHeaders" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.Rtc.Signaling.SignalingHeader&gt;" />
      </Parameters>
      <Docs>
        <param name="ownerUri">
            The URI for this endpoint. This should not include port. Port will be 
            automatically added depending on the listening port, if any.
            </param>
        <param name="connectionManager">
            The connection manager to use for this endpoint. 
            </param>
        <param name="defaultTransportType">
            The default transport for outgoing messages, if the application did not override the
            transport explicitly. For example, invite URI can have transport type to override this.
            </param>
        <param name="additionalHeaders">
            Additional headers to add to every SIP message sent by this endpoint.
            </param>
        <summary>
            Initializes a new instance of the SipPeerToPeerEndpoint class.  
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SipPeerToPeerEndpoint (string ownerUri, Microsoft.Rtc.Signaling.RealTimeServerConnectionManager connectionManager, Microsoft.Rtc.Signaling.SipTransportType defaultTransportType, string gruu);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string ownerUri, class Microsoft.Rtc.Signaling.RealTimeServerConnectionManager connectionManager, valuetype Microsoft.Rtc.Signaling.SipTransportType defaultTransportType, string gruu) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Rtc.Signaling.SipPeerToPeerEndpoint.#ctor(System.String,Microsoft.Rtc.Signaling.RealTimeServerConnectionManager,Microsoft.Rtc.Signaling.SipTransportType,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (ownerUri As String, connectionManager As RealTimeServerConnectionManager, defaultTransportType As SipTransportType, gruu As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SipPeerToPeerEndpoint(System::String ^ ownerUri, Microsoft::Rtc::Signaling::RealTimeServerConnectionManager ^ connectionManager, Microsoft::Rtc::Signaling::SipTransportType defaultTransportType, System::String ^ gruu);" />
      <MemberSignature Language="F#" Value="new Microsoft.Rtc.Signaling.SipPeerToPeerEndpoint : string * Microsoft.Rtc.Signaling.RealTimeServerConnectionManager * Microsoft.Rtc.Signaling.SipTransportType * string -&gt; Microsoft.Rtc.Signaling.SipPeerToPeerEndpoint" Usage="new Microsoft.Rtc.Signaling.SipPeerToPeerEndpoint (ownerUri, connectionManager, defaultTransportType, gruu)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Rtc.Collaboration</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="ownerUri" Type="System.String" />
        <Parameter Name="connectionManager" Type="Microsoft.Rtc.Signaling.RealTimeServerConnectionManager" />
        <Parameter Name="defaultTransportType" Type="Microsoft.Rtc.Signaling.SipTransportType" />
        <Parameter Name="gruu" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="ownerUri">
            The URI for this endpoint. This should not include port. Port will be 
            automatically added depending on the listening port, if any.
            </param>
        <param name="connectionManager">
            The connection manager to use for this endpoint. Can be null.
            </param>
        <param name="defaultTransportType">
            The default transport for outgoing messages, if the application did not override the
            transport explicitly. For example, invite URI can have transport type to override this.
            </param>
        <param name="gruu">The GRUU to be used for the endpoint</param>
        <summary>
            Initializes a new instance of SipPeerToPeerEndpoint.  
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">Thrown when some supplied argument is invalid.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SipPeerToPeerEndpoint (string ownerUri, Microsoft.Rtc.Signaling.RealTimeServerConnectionManager connectionManager, Microsoft.Rtc.Signaling.SipTransportType defaultTransportType, string proxyHost, int proxyPort);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string ownerUri, class Microsoft.Rtc.Signaling.RealTimeServerConnectionManager connectionManager, valuetype Microsoft.Rtc.Signaling.SipTransportType defaultTransportType, string proxyHost, int32 proxyPort) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Rtc.Signaling.SipPeerToPeerEndpoint.#ctor(System.String,Microsoft.Rtc.Signaling.RealTimeServerConnectionManager,Microsoft.Rtc.Signaling.SipTransportType,System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (ownerUri As String, connectionManager As RealTimeServerConnectionManager, defaultTransportType As SipTransportType, proxyHost As String, proxyPort As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SipPeerToPeerEndpoint(System::String ^ ownerUri, Microsoft::Rtc::Signaling::RealTimeServerConnectionManager ^ connectionManager, Microsoft::Rtc::Signaling::SipTransportType defaultTransportType, System::String ^ proxyHost, int proxyPort);" />
      <MemberSignature Language="F#" Value="new Microsoft.Rtc.Signaling.SipPeerToPeerEndpoint : string * Microsoft.Rtc.Signaling.RealTimeServerConnectionManager * Microsoft.Rtc.Signaling.SipTransportType * string * int -&gt; Microsoft.Rtc.Signaling.SipPeerToPeerEndpoint" Usage="new Microsoft.Rtc.Signaling.SipPeerToPeerEndpoint (ownerUri, connectionManager, defaultTransportType, proxyHost, proxyPort)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Rtc.Collaboration</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="ownerUri" Type="System.String" />
        <Parameter Name="connectionManager" Type="Microsoft.Rtc.Signaling.RealTimeServerConnectionManager" />
        <Parameter Name="defaultTransportType" Type="Microsoft.Rtc.Signaling.SipTransportType" />
        <Parameter Name="proxyHost" Type="System.String" />
        <Parameter Name="proxyPort" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="ownerUri">
            The URI for the owner of this endpoint. This should not include port.
            </param>
        <param name="connectionManager">
            The connection manager to use for this endpoint. 
            </param>
        <param name="defaultTransportType">
            The default transport for outgoing messages, if the application did not override the
            transport explicitly. For example, invite URI can have transport type to override this.
            However, when proxy is used for the message, then only Tls specification in the message
            will override the defaultTransport type.
            </param>
        <param name="proxyHost">
            The proxy host to use as first hop instead of direct connection to the other endpoint. This allows
            us to route messages to endpoints that may not be directly reachable.
            </param>
        <param name="proxyPort">The port to use for connecting to proxy.</param>
        <summary>
            Initializes a new instance of the SipPeerToPeerEndpoint class.  
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SipPeerToPeerEndpoint (string ownerUri, Microsoft.Rtc.Signaling.RealTimeServerConnectionManager connectionManager, Microsoft.Rtc.Signaling.SipTransportType defaultTransportType, string proxyHost, int proxyPort, System.Collections.Generic.IEnumerable&lt;Microsoft.Rtc.Signaling.SignalingHeader&gt; additionalHeaders);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string ownerUri, class Microsoft.Rtc.Signaling.RealTimeServerConnectionManager connectionManager, valuetype Microsoft.Rtc.Signaling.SipTransportType defaultTransportType, string proxyHost, int32 proxyPort, class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.Rtc.Signaling.SignalingHeader&gt; additionalHeaders) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Rtc.Signaling.SipPeerToPeerEndpoint.#ctor(System.String,Microsoft.Rtc.Signaling.RealTimeServerConnectionManager,Microsoft.Rtc.Signaling.SipTransportType,System.String,System.Int32,System.Collections.Generic.IEnumerable{Microsoft.Rtc.Signaling.SignalingHeader})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (ownerUri As String, connectionManager As RealTimeServerConnectionManager, defaultTransportType As SipTransportType, proxyHost As String, proxyPort As Integer, additionalHeaders As IEnumerable(Of SignalingHeader))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SipPeerToPeerEndpoint(System::String ^ ownerUri, Microsoft::Rtc::Signaling::RealTimeServerConnectionManager ^ connectionManager, Microsoft::Rtc::Signaling::SipTransportType defaultTransportType, System::String ^ proxyHost, int proxyPort, System::Collections::Generic::IEnumerable&lt;Microsoft::Rtc::Signaling::SignalingHeader ^&gt; ^ additionalHeaders);" />
      <MemberSignature Language="F#" Value="new Microsoft.Rtc.Signaling.SipPeerToPeerEndpoint : string * Microsoft.Rtc.Signaling.RealTimeServerConnectionManager * Microsoft.Rtc.Signaling.SipTransportType * string * int * seq&lt;Microsoft.Rtc.Signaling.SignalingHeader&gt; -&gt; Microsoft.Rtc.Signaling.SipPeerToPeerEndpoint" Usage="new Microsoft.Rtc.Signaling.SipPeerToPeerEndpoint (ownerUri, connectionManager, defaultTransportType, proxyHost, proxyPort, additionalHeaders)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Rtc.Collaboration</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="ownerUri" Type="System.String" />
        <Parameter Name="connectionManager" Type="Microsoft.Rtc.Signaling.RealTimeServerConnectionManager" />
        <Parameter Name="defaultTransportType" Type="Microsoft.Rtc.Signaling.SipTransportType" />
        <Parameter Name="proxyHost" Type="System.String" />
        <Parameter Name="proxyPort" Type="System.Int32" />
        <Parameter Name="additionalHeaders" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.Rtc.Signaling.SignalingHeader&gt;" />
      </Parameters>
      <Docs>
        <param name="ownerUri">
            The URI for the owner of this endpoint. This should not include port.
            </param>
        <param name="connectionManager">
            The connection manager to use for this endpoint. 
            </param>
        <param name="defaultTransportType">
            The default transport for outgoing messages, if the application did not override the
            transport explicitly. For example, invite URI can have transport type to override this.
            However, when proxy is used for the message, then only Tls specification in the message
            will override the defaultTransport type.
            </param>
        <param name="proxyHost">
            The proxy host to use as first hop instead of direct connection to the other endpoint. This allows
            us to route messages to endpoints that may not be directly reachable.
            </param>
        <param name="proxyPort">The port to use for connecting to proxy.</param>
        <param name="additionalHeaders">
            Additional headers to add to every SIP message sent by this endpoint.
            </param>
        <summary>
            Initializes a new instance of the SipPeerToPeerEndpoint class.  
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SipPeerToPeerEndpoint (string uri, Microsoft.Rtc.Signaling.RealTimeServerConnectionManager connectionManager, Microsoft.Rtc.Signaling.SipTransportType defaultTransportType, string proxyHost, int proxyPort, string gruu);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string uri, class Microsoft.Rtc.Signaling.RealTimeServerConnectionManager connectionManager, valuetype Microsoft.Rtc.Signaling.SipTransportType defaultTransportType, string proxyHost, int32 proxyPort, string gruu) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Rtc.Signaling.SipPeerToPeerEndpoint.#ctor(System.String,Microsoft.Rtc.Signaling.RealTimeServerConnectionManager,Microsoft.Rtc.Signaling.SipTransportType,System.String,System.Int32,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (uri As String, connectionManager As RealTimeServerConnectionManager, defaultTransportType As SipTransportType, proxyHost As String, proxyPort As Integer, gruu As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SipPeerToPeerEndpoint(System::String ^ uri, Microsoft::Rtc::Signaling::RealTimeServerConnectionManager ^ connectionManager, Microsoft::Rtc::Signaling::SipTransportType defaultTransportType, System::String ^ proxyHost, int proxyPort, System::String ^ gruu);" />
      <MemberSignature Language="F#" Value="new Microsoft.Rtc.Signaling.SipPeerToPeerEndpoint : string * Microsoft.Rtc.Signaling.RealTimeServerConnectionManager * Microsoft.Rtc.Signaling.SipTransportType * string * int * string -&gt; Microsoft.Rtc.Signaling.SipPeerToPeerEndpoint" Usage="new Microsoft.Rtc.Signaling.SipPeerToPeerEndpoint (uri, connectionManager, defaultTransportType, proxyHost, proxyPort, gruu)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Rtc.Collaboration</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="uri" Type="System.String" />
        <Parameter Name="connectionManager" Type="Microsoft.Rtc.Signaling.RealTimeServerConnectionManager" />
        <Parameter Name="defaultTransportType" Type="Microsoft.Rtc.Signaling.SipTransportType" />
        <Parameter Name="proxyHost" Type="System.String" />
        <Parameter Name="proxyPort" Type="System.Int32" />
        <Parameter Name="gruu" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="uri">
            The URI for this endpoint. This should not include port. Port will be 
            automatically added depending on the listening port, if any.
            </param>
        <param name="connectionManager">
            The connection manager to use for this endpoint. Can be null.
            </param>
        <param name="defaultTransportType">
            The default transport for outgoing messages, if the application did not override the
            transport explicitly. For example, invite URI can have transport type to override this.
            However, when proxy is used for the message, then only Tls specification in the message
            will override the defaultTransport type.
            </param>
        <param name="proxyHost">
            The proxy host to use as first hop instead of direct connection to the other endpoint. This allows
            us to route messages to endpoints that may not be directly reachable.
            </param>
        <param name="proxyPort">The port to use for connecting to proxy.</param>
        <param name="gruu">The GRUU to be used for the endpoint</param>
        <summary>
            Initializes a new instance of SipPeerToPeerEndpoint.  
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">Thrown when some supplied argument is invalid.</exception>
      </Docs>
    </Member>
    <Member MemberName="BeginSendMessage">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginSendMessage (string localIdentityUri, Microsoft.Rtc.Signaling.MessageType messageType, Microsoft.Rtc.Signaling.RealTimeAddress sessionTarget, System.Net.Mime.ContentType contentType, byte[] body, System.Collections.Generic.IEnumerable&lt;Microsoft.Rtc.Signaling.SignalingHeader&gt; signalingHeaders, AsyncCallback userCallback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginSendMessage(string localIdentityUri, valuetype Microsoft.Rtc.Signaling.MessageType messageType, class Microsoft.Rtc.Signaling.RealTimeAddress sessionTarget, class System.Net.Mime.ContentType contentType, unsigned int8[] body, class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.Rtc.Signaling.SignalingHeader&gt; signalingHeaders, class System.AsyncCallback userCallback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Rtc.Signaling.SipPeerToPeerEndpoint.BeginSendMessage(System.String,Microsoft.Rtc.Signaling.MessageType,Microsoft.Rtc.Signaling.RealTimeAddress,System.Net.Mime.ContentType,System.Byte[],System.Collections.Generic.IEnumerable{Microsoft.Rtc.Signaling.SignalingHeader},System.AsyncCallback,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginSendMessage(System::String ^ localIdentityUri, Microsoft::Rtc::Signaling::MessageType messageType, Microsoft::Rtc::Signaling::RealTimeAddress ^ sessionTarget, System::Net::Mime::ContentType ^ contentType, cli::array &lt;System::Byte&gt; ^ body, System::Collections::Generic::IEnumerable&lt;Microsoft::Rtc::Signaling::SignalingHeader ^&gt; ^ signalingHeaders, AsyncCallback ^ userCallback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="override this.BeginSendMessage : string * Microsoft.Rtc.Signaling.MessageType * Microsoft.Rtc.Signaling.RealTimeAddress * System.Net.Mime.ContentType * byte[] * seq&lt;Microsoft.Rtc.Signaling.SignalingHeader&gt; * AsyncCallback * obj -&gt; IAsyncResult" Usage="sipPeerToPeerEndpoint.BeginSendMessage (localIdentityUri, messageType, sessionTarget, contentType, body, signalingHeaders, userCallback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Rtc.Collaboration</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="localIdentityUri" Type="System.String" />
        <Parameter Name="messageType" Type="Microsoft.Rtc.Signaling.MessageType" />
        <Parameter Name="sessionTarget" Type="Microsoft.Rtc.Signaling.RealTimeAddress" />
        <Parameter Name="contentType" Type="System.Net.Mime.ContentType" />
        <Parameter Name="body" Type="System.Byte[]" />
        <Parameter Name="signalingHeaders" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.Rtc.Signaling.SignalingHeader&gt;" />
        <Parameter Name="userCallback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="localIdentityUri">The local identify URI to use. If null, local endpoint's URI is used.</param>
        <param name="messageType">The message type.</param>
        <param name="sessionTarget">Target to send the message.</param>
        <param name="contentType">Content type describing the body. If null text/plain, UTF-8 is assumed.</param>
        <param name="body">The body for the data.</param>
        <param name="signalingHeaders">The headers provided for this invite. Can be null.</param>
        <param name="userCallback">The method to be called when the asynchronous operation is completed.</param>
        <param name="state">A user-provided object that distinguishes this particular asynchronous operation from others.</param>
        <summary>
            Sends a message. 
            </summary>
        <returns>An IAsyncResult that references the asynchronous operation.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
            Thrown when null is supplied for a required argument.  The argument name which is required is 
            is part of the exception message.</exception>
        <exception cref="T:System.ArgumentException">
            Thrown if one of the SignalingHeader in signalingHeaders collection have null or restricted header.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="ConnectionManager">
      <MemberSignature Language="C#" Value="public Microsoft.Rtc.Signaling.RealTimeServerConnectionManager ConnectionManager { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Rtc.Signaling.RealTimeServerConnectionManager ConnectionManager" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Rtc.Signaling.SipPeerToPeerEndpoint.ConnectionManager" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ConnectionManager As RealTimeServerConnectionManager" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Rtc::Signaling::RealTimeServerConnectionManager ^ ConnectionManager { Microsoft::Rtc::Signaling::RealTimeServerConnectionManager ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ConnectionManager : Microsoft.Rtc.Signaling.RealTimeServerConnectionManager" Usage="Microsoft.Rtc.Signaling.SipPeerToPeerEndpoint.ConnectionManager" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Rtc.Collaboration</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Rtc.Signaling.RealTimeServerConnectionManager</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the connection manager used by this endpoint.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultTransport">
      <MemberSignature Language="C#" Value="public Microsoft.Rtc.Signaling.SipTransportType DefaultTransport { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.Rtc.Signaling.SipTransportType DefaultTransport" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Rtc.Signaling.SipPeerToPeerEndpoint.DefaultTransport" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DefaultTransport As SipTransportType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Rtc::Signaling::SipTransportType DefaultTransport { Microsoft::Rtc::Signaling::SipTransportType get(); };" />
      <MemberSignature Language="F#" Value="member this.DefaultTransport : Microsoft.Rtc.Signaling.SipTransportType" Usage="Microsoft.Rtc.Signaling.SipPeerToPeerEndpoint.DefaultTransport" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Rtc.Collaboration</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Rtc.Signaling.SipTransportType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the default transport.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EndpointUri">
      <MemberSignature Language="C#" Value="public override string EndpointUri { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string EndpointUri" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Rtc.Signaling.SipPeerToPeerEndpoint.EndpointUri" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property EndpointUri As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ EndpointUri { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.EndpointUri : string" Usage="Microsoft.Rtc.Signaling.SipPeerToPeerEndpoint.EndpointUri" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Rtc.Collaboration</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the URI of the endpoint.
            </summary>
        <value>To be added.</value>
        <remarks>
          <para>
            Note that the endpoint URI is used to communicate with this specific endpoint and cannot be used to communicate with another
            endpoint of the current endpoint owner.
            </para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ProxyCertificateSubject">
      <MemberSignature Language="C#" Value="public string ProxyCertificateSubject { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ProxyCertificateSubject" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Rtc.Signaling.SipPeerToPeerEndpoint.ProxyCertificateSubject" />
      <MemberSignature Language="VB.NET" Value="Public Property ProxyCertificateSubject As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ProxyCertificateSubject { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ProxyCertificateSubject : string with get, set" Usage="Microsoft.Rtc.Signaling.SipPeerToPeerEndpoint.ProxyCertificateSubject" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Rtc.Collaboration</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets or sets the subject of the certificate to expect from the proxy.
            </summary>
        <value>To be added.</value>
        <remarks>
          <para> It is used only if the endpoint is configured with a proxy and Tls is used for transport.
            It needs to be set only when the subject of the certificate expected from the proxy differs from the proxy's name.
            </para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="State">
      <MemberSignature Language="C#" Value="public Microsoft.Rtc.Signaling.EndpointState State { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.Rtc.Signaling.EndpointState State" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Rtc.Signaling.SipPeerToPeerEndpoint.State" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property State As EndpointState" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Rtc::Signaling::EndpointState State { Microsoft::Rtc::Signaling::EndpointState get(); };" />
      <MemberSignature Language="F#" Value="member this.State : Microsoft.Rtc.Signaling.EndpointState" Usage="Microsoft.Rtc.Signaling.SipPeerToPeerEndpoint.State" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Rtc.Collaboration</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Rtc.Signaling.EndpointState</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the current state of the endpoint.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StateChanged">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;Microsoft.Rtc.Signaling.EndpointStateChangedEventArgs&gt; StateChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class Microsoft.Rtc.Signaling.EndpointStateChangedEventArgs&gt; StateChanged" />
      <MemberSignature Language="DocId" Value="E:Microsoft.Rtc.Signaling.SipPeerToPeerEndpoint.StateChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StateChanged As EventHandler(Of EndpointStateChangedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;Microsoft::Rtc::Signaling::EndpointStateChangedEventArgs ^&gt; ^ StateChanged;" />
      <MemberSignature Language="F#" Value="member this.StateChanged : EventHandler&lt;Microsoft.Rtc.Signaling.EndpointStateChangedEventArgs&gt; " Usage="member this.StateChanged : System.EventHandler&lt;Microsoft.Rtc.Signaling.EndpointStateChangedEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Rtc.Collaboration</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;Microsoft.Rtc.Signaling.EndpointStateChangedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Raised when the state of the endpoint changes.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Uri">
      <MemberSignature Language="C#" Value="public override string Uri { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Uri" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Rtc.Signaling.SipPeerToPeerEndpoint.Uri" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Uri As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Uri { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Uri : string" Usage="Microsoft.Rtc.Signaling.SipPeerToPeerEndpoint.Uri" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Rtc.Collaboration</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the URI of the endpoint. This URI is meant to be routable if presented to another peer.
            Hence this might include port (if listening) and a URI parameter called ms-opaque that is
            used for uniquely routing incoming messages to the right p2p endpoint by the connection manager.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>