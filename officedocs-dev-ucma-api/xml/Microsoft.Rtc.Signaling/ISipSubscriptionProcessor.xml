<Type Name="ISipSubscriptionProcessor" FullName="Microsoft.Rtc.Signaling.ISipSubscriptionProcessor">
  <TypeSignature Language="C#" Value="public interface ISipSubscriptionProcessor" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract ISipSubscriptionProcessor" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Rtc.Signaling.ISipSubscriptionProcessor" />
  <TypeSignature Language="VB.NET" Value="Public Interface ISipSubscriptionProcessor" />
  <TypeSignature Language="C++ CLI" Value="public interface class ISipSubscriptionProcessor" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Rtc.Collaboration</AssemblyName>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>
            Represents the interface that needs to be implemented by users of the SipSubscription class. The reference to 
            this interface needs to be passed to the SipSubscription class instantiation.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="GetExtensionHeaders">
      <MemberSignature Language="C#" Value="public void GetExtensionHeaders (Microsoft.Rtc.Signaling.SipSubscription.RequestType requestType, out System.Collections.Generic.IEnumerable&lt;Microsoft.Rtc.Signaling.SignalingHeader&gt; extensionHeaders);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GetExtensionHeaders(valuetype Microsoft.Rtc.Signaling.SipSubscription/RequestType requestType, [out] class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.Rtc.Signaling.SignalingHeader&gt;&amp; extensionHeaders) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Rtc.Signaling.ISipSubscriptionProcessor.GetExtensionHeaders(Microsoft.Rtc.Signaling.SipSubscription.RequestType,System.Collections.Generic.IEnumerable{Microsoft.Rtc.Signaling.SignalingHeader}@)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void GetExtensionHeaders(Microsoft::Rtc::Signaling::SipSubscription::RequestType requestType, [Runtime::InteropServices::Out] System::Collections::Generic::IEnumerable&lt;Microsoft::Rtc::Signaling::SignalingHeader ^&gt; ^ % extensionHeaders);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Rtc.Collaboration</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestType" Type="Microsoft.Rtc.Signaling.SipSubscription+RequestType" />
        <Parameter Name="extensionHeaders" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.Rtc.Signaling.SignalingHeader&gt;&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="requestType">Subscription request type.</param>
        <param name="extensionHeaders">List of extension headers to be added in subscription request.</param>
        <summary>
            Put the additional extension headers on extensionHeader to be included in request based on requestType.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMessageBody">
      <MemberSignature Language="C#" Value="public void GetMessageBody (Microsoft.Rtc.Signaling.SipSubscription.RequestType requestType, out System.Net.Mime.ContentType contentType, out byte[] messageBody);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GetMessageBody(valuetype Microsoft.Rtc.Signaling.SipSubscription/RequestType requestType, [out] class System.Net.Mime.ContentType&amp; contentType, [out] unsigned int8[]&amp; messageBody) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Rtc.Signaling.ISipSubscriptionProcessor.GetMessageBody(Microsoft.Rtc.Signaling.SipSubscription.RequestType,System.Net.Mime.ContentType@,System.Byte[]@)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void GetMessageBody(Microsoft::Rtc::Signaling::SipSubscription::RequestType requestType, [Runtime::InteropServices::Out] System::Net::Mime::ContentType ^ % contentType, [Runtime::InteropServices::Out] cli::array &lt;System::Byte&gt; ^ % messageBody);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Rtc.Collaboration</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestType" Type="Microsoft.Rtc.Signaling.SipSubscription+RequestType" />
        <Parameter Name="contentType" Type="System.Net.Mime.ContentType&amp;" RefType="out" />
        <Parameter Name="messageBody" Type="System.Byte[]&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="requestType">Subscription request type.</param>
        <param name="contentType">ContentType to be specify on contenttype header of the message.</param>
        <param name="messageBody">Content body for the request message.</param>
        <summary>
            Puts the desired ContentType and messageBody on out params for the given requestType.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ProcessErrorResponse">
      <MemberSignature Language="C#" Value="public void ProcessErrorResponse (Microsoft.Rtc.Signaling.SipResponseData message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ProcessErrorResponse(class Microsoft.Rtc.Signaling.SipResponseData message) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Rtc.Signaling.ISipSubscriptionProcessor.ProcessErrorResponse(Microsoft.Rtc.Signaling.SipResponseData)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ProcessErrorResponse (message As SipResponseData)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ProcessErrorResponse(Microsoft::Rtc::Signaling::SipResponseData ^ message);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Rtc.Collaboration</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="Microsoft.Rtc.Signaling.SipResponseData" />
      </Parameters>
      <Docs>
        <param name="message">ResponsData received from server.</param>
        <summary>
            ProcessErrorResponse is invoked, when non-200 response is received from the server. 
            </summary>
        <remarks>
          <para>
            SipSubscription state change will occur before the method is invoked. This give chance to app to investigate the error for subscription failure, 
            If Subscription state is WaitingForRetry, application can choose to terminate the subscription, if it do not want to retry the subscription.
            </para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ProcessNotification">
      <MemberSignature Language="C#" Value="public void ProcessNotification (Microsoft.Rtc.Signaling.SipMessageData message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ProcessNotification(class Microsoft.Rtc.Signaling.SipMessageData message) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Rtc.Signaling.ISipSubscriptionProcessor.ProcessNotification(Microsoft.Rtc.Signaling.SipMessageData)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ProcessNotification (message As SipMessageData)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ProcessNotification(Microsoft::Rtc::Signaling::SipMessageData ^ message);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Rtc.Collaboration</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="Microsoft.Rtc.Signaling.SipMessageData" />
      </Parameters>
      <Docs>
        <param name="message">To be added.</param>
        <summary>
            SipSubscription invokes this method for every notification. Users should implement the notification message processing and appropriate 
            event raising code here.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SubscriptionStateChanged">
      <MemberSignature Language="C#" Value="public void SubscriptionStateChanged (Microsoft.Rtc.Signaling.SubscriptionStateChangedEventArgs eventArg);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SubscriptionStateChanged(class Microsoft.Rtc.Signaling.SubscriptionStateChangedEventArgs eventArg) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Rtc.Signaling.ISipSubscriptionProcessor.SubscriptionStateChanged(Microsoft.Rtc.Signaling.SubscriptionStateChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SubscriptionStateChanged (eventArg As SubscriptionStateChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SubscriptionStateChanged(Microsoft::Rtc::Signaling::SubscriptionStateChangedEventArgs ^ eventArg);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Rtc.Collaboration</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventArg" Type="Microsoft.Rtc.Signaling.SubscriptionStateChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="eventArg">Event specific arguments.</param>
        <summary>
            SipSubscription invokes this method whenever any subscription signaling state changes occur.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>