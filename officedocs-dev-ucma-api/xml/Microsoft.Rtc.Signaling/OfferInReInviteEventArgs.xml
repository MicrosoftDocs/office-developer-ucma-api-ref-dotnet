<Type Name="OfferInReInviteEventArgs" FullName="Microsoft.Rtc.Signaling.OfferInReInviteEventArgs">
  <TypeSignature Language="C#" Value="public abstract class OfferInReInviteEventArgs : EventArgs" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit OfferInReInviteEventArgs extends System.EventArgs" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Rtc.Signaling.OfferInReInviteEventArgs" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class OfferInReInviteEventArgs&#xA;Inherits EventArgs" />
  <TypeSignature Language="C++ CLI" Value="public ref class OfferInReInviteEventArgs abstract : EventArgs" />
  <TypeSignature Language="F#" Value="type OfferInReInviteEventArgs = class&#xA;    inherit EventArgs" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Rtc.Collaboration</AssemblyName>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.EventArgs</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            Used with the HandleReInviteOfferReceived call in IOfferAnswer.
            This will expose the media offer from the remote participant and gives
            the ability to send the media answer. 
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="Accept">
      <MemberSignature Language="C#" Value="public Microsoft.Rtc.Signaling.SipRequestData Accept (System.Collections.Generic.IEnumerable&lt;Microsoft.Rtc.Signaling.SignalingHeader&gt; signalingHeaders);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.Rtc.Signaling.SipRequestData Accept(class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.Rtc.Signaling.SignalingHeader&gt; signalingHeaders) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Rtc.Signaling.OfferInReInviteEventArgs.Accept(System.Collections.Generic.IEnumerable{Microsoft.Rtc.Signaling.SignalingHeader})" />
      <MemberSignature Language="VB.NET" Value="Public Function Accept (signalingHeaders As IEnumerable(Of SignalingHeader)) As SipRequestData" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::Rtc::Signaling::SipRequestData ^ Accept(System::Collections::Generic::IEnumerable&lt;Microsoft::Rtc::Signaling::SignalingHeader ^&gt; ^ signalingHeaders);" />
      <MemberSignature Language="F#" Value="member this.Accept : seq&lt;Microsoft.Rtc.Signaling.SignalingHeader&gt; -&gt; Microsoft.Rtc.Signaling.SipRequestData" Usage="offerInReInviteEventArgs.Accept signalingHeaders" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Rtc.Collaboration</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Rtc.Signaling.SipRequestData</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="signalingHeaders" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.Rtc.Signaling.SignalingHeader&gt;" />
      </Parameters>
      <Docs>
        <param name="signalingHeaders">The signaling headers to use in the response. Can be null.</param>
        <summary>
            Synchronously accepts the offer and triggers IOfferAnswer.GetAnswer calls to send the answer. 
            </summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            The application can call this method when it is ready with the answer for the offer 
            represented in this event arg.
            </para>
          <para>
            This method is not recommended for UI threads or scalable server applications.
            </para>
          <para />
        </remarks>
        <exception cref="T:System.InvalidOperationException">Thrown when final response has already been sent.</exception>
        <exception cref="T:System.ArgumentException">Thrown when there are problems with arguments supplied.</exception>
        <exception cref="T:Microsoft.Rtc.Signaling.OperationTimeoutException">Thrown when ack is not received.</exception>
        <exception cref="T:Microsoft.Rtc.Signaling.RealTimeException">Thrown when the response cannot be sent for other reasons.</exception>
      </Docs>
    </Member>
    <Member MemberName="BeginAccept">
      <MemberSignature Language="C#" Value="public abstract IAsyncResult BeginAccept (System.Collections.Generic.IEnumerable&lt;Microsoft.Rtc.Signaling.SignalingHeader&gt; signalingHeaders, AsyncCallback userCallback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginAccept(class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.Rtc.Signaling.SignalingHeader&gt; signalingHeaders, class System.AsyncCallback userCallback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Rtc.Signaling.OfferInReInviteEventArgs.BeginAccept(System.Collections.Generic.IEnumerable{Microsoft.Rtc.Signaling.SignalingHeader},System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function BeginAccept (signalingHeaders As IEnumerable(Of SignalingHeader), userCallback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract IAsyncResult ^ BeginAccept(System::Collections::Generic::IEnumerable&lt;Microsoft::Rtc::Signaling::SignalingHeader ^&gt; ^ signalingHeaders, AsyncCallback ^ userCallback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="abstract member BeginAccept : seq&lt;Microsoft.Rtc.Signaling.SignalingHeader&gt; * AsyncCallback * obj -&gt; IAsyncResult" Usage="offerInReInviteEventArgs.BeginAccept (signalingHeaders, userCallback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Rtc.Collaboration</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="signalingHeaders" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.Rtc.Signaling.SignalingHeader&gt;" />
        <Parameter Name="userCallback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="signalingHeaders">The signaling headers to use in the response. Can be null.</param>
        <param name="userCallback">The method to be called when the asynchronous operation is completed.</param>
        <param name="state">A user-provided object that distinguishes this particular asynchronous operation from other asynchronous operations.</param>
        <summary>
            Accepts the offer and triggers IOfferAnswer.GetAnswer calls to send the answer. 
            </summary>
        <returns>An IAsyncResult that references the asynchronous operation.</returns>
        <remarks>
          <para>
            The application can call this method when it is ready with the answer for the offer 
            represented in this event arg.
            </para>
          <para />
        </remarks>
        <exception cref="T:System.InvalidOperationException">Thrown when final response has already been sent.</exception>
      </Docs>
    </Member>
    <Member MemberName="BeginDecline">
      <MemberSignature Language="C#" Value="public abstract IAsyncResult BeginDecline (int responseCode, string reasonPhrase, System.Collections.Generic.IEnumerable&lt;Microsoft.Rtc.Signaling.SignalingHeader&gt; signalingHeaders, System.Net.Mime.ContentType contentType, byte[] body, AsyncCallback userCallback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginDecline(int32 responseCode, string reasonPhrase, class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.Rtc.Signaling.SignalingHeader&gt; signalingHeaders, class System.Net.Mime.ContentType contentType, unsigned int8[] body, class System.AsyncCallback userCallback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Rtc.Signaling.OfferInReInviteEventArgs.BeginDecline(System.Int32,System.String,System.Collections.Generic.IEnumerable{Microsoft.Rtc.Signaling.SignalingHeader},System.Net.Mime.ContentType,System.Byte[],System.AsyncCallback,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract IAsyncResult ^ BeginDecline(int responseCode, System::String ^ reasonPhrase, System::Collections::Generic::IEnumerable&lt;Microsoft::Rtc::Signaling::SignalingHeader ^&gt; ^ signalingHeaders, System::Net::Mime::ContentType ^ contentType, cli::array &lt;System::Byte&gt; ^ body, AsyncCallback ^ userCallback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="abstract member BeginDecline : int * string * seq&lt;Microsoft.Rtc.Signaling.SignalingHeader&gt; * System.Net.Mime.ContentType * byte[] * AsyncCallback * obj -&gt; IAsyncResult" Usage="offerInReInviteEventArgs.BeginDecline (responseCode, reasonPhrase, signalingHeaders, contentType, body, userCallback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Rtc.Collaboration</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="responseCode" Type="System.Int32" />
        <Parameter Name="reasonPhrase" Type="System.String" />
        <Parameter Name="signalingHeaders" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.Rtc.Signaling.SignalingHeader&gt;" />
        <Parameter Name="contentType" Type="System.Net.Mime.ContentType" />
        <Parameter Name="body" Type="System.Byte[]" />
        <Parameter Name="userCallback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="responseCode">The response code to decline with.</param>
        <param name="reasonPhrase">The reason phrase to use. Can be null.</param>
        <param name="signalingHeaders">The signaling headers to use in the response. Can be null.</param>
        <param name="contentType">
            The content type of the body. Can be null if body is null.</param>
        <param name="body">The body to send.</param>
        <param name="userCallback">The method to be called when the asynchronous operation is completed.</param>
        <param name="state">A user-provided object that distinguishes this particular asynchronous operation from other asynchronous operations.</param>
        <summary>
            Decline the offer with a specific reason. The operation will complete when 
            the ACK message is received.
            </summary>
        <returns>An IAsyncResult that references the asynchronous operation.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">
            Thrown when called in an invalid state or a final response has already been sent.
            </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">The response code is not in the range expected.</exception>
        <exception cref="T:System.ArgumentException">Thrown when there are problems with arguments supplied.</exception>
        <exception cref="T:Microsoft.Rtc.Signaling.RealTimeException">Thrown when the response cannot be sent for other reasons.</exception>
      </Docs>
    </Member>
    <Member MemberName="Cancelled">
      <MemberSignature Language="C#" Value="public abstract event EventHandler&lt;EventArgs&gt; Cancelled;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.EventArgs&gt; Cancelled" />
      <MemberSignature Language="DocId" Value="E:Microsoft.Rtc.Signaling.OfferInReInviteEventArgs.Cancelled" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Custom Event Cancelled As EventHandler(Of EventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract event EventHandler&lt;EventArgs ^&gt; ^ Cancelled;" />
      <MemberSignature Language="F#" Value="member this.Cancelled : EventHandler&lt;EventArgs&gt; " Usage="member this.Cancelled : System.EventHandler&lt;System.EventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Rtc.Collaboration</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.EventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Raised when the reinvite is cancelled by the sender.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Decline">
      <MemberSignature Language="C#" Value="public Microsoft.Rtc.Signaling.SipRequestData Decline (int responseCode, string reasonPhrase, System.Collections.Generic.IEnumerable&lt;Microsoft.Rtc.Signaling.SignalingHeader&gt; signalingHeaders, System.Net.Mime.ContentType contentType, byte[] body);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.Rtc.Signaling.SipRequestData Decline(int32 responseCode, string reasonPhrase, class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.Rtc.Signaling.SignalingHeader&gt; signalingHeaders, class System.Net.Mime.ContentType contentType, unsigned int8[] body) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Rtc.Signaling.OfferInReInviteEventArgs.Decline(System.Int32,System.String,System.Collections.Generic.IEnumerable{Microsoft.Rtc.Signaling.SignalingHeader},System.Net.Mime.ContentType,System.Byte[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::Rtc::Signaling::SipRequestData ^ Decline(int responseCode, System::String ^ reasonPhrase, System::Collections::Generic::IEnumerable&lt;Microsoft::Rtc::Signaling::SignalingHeader ^&gt; ^ signalingHeaders, System::Net::Mime::ContentType ^ contentType, cli::array &lt;System::Byte&gt; ^ body);" />
      <MemberSignature Language="F#" Value="member this.Decline : int * string * seq&lt;Microsoft.Rtc.Signaling.SignalingHeader&gt; * System.Net.Mime.ContentType * byte[] -&gt; Microsoft.Rtc.Signaling.SipRequestData" Usage="offerInReInviteEventArgs.Decline (responseCode, reasonPhrase, signalingHeaders, contentType, body)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Rtc.Collaboration</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Rtc.Signaling.SipRequestData</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="responseCode" Type="System.Int32" />
        <Parameter Name="reasonPhrase" Type="System.String" />
        <Parameter Name="signalingHeaders" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.Rtc.Signaling.SignalingHeader&gt;" />
        <Parameter Name="contentType" Type="System.Net.Mime.ContentType" />
        <Parameter Name="body" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="responseCode">The response code to decline with.</param>
        <param name="reasonPhrase">The reason phrase to use. Can be null.</param>
        <param name="signalingHeaders">The signaling headers to use in the response. Can be null.</param>
        <param name="contentType">
            The content type of the body. Can be null if body is null.</param>
        <param name="body">The body to send.</param>
        <summary>
            Synchronously declines the media offer with the specific response code.
            </summary>
        <returns>Returns the ack data received.</returns>
        <remarks>
          <para>
            This method is not recommended for UI threads or scalable server applications.
            </para>
          <para />
        </remarks>
        <exception cref="T:System.InvalidOperationException">
            Thrown when called in an invalid state or a final response has already been sent.
            </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">The response code is not in the range expected.</exception>
        <exception cref="T:System.ArgumentException">Thrown when there are problems with arguments supplied.</exception>
        <exception cref="T:Microsoft.Rtc.Signaling.OperationTimeoutException">Thrown when ack is not received.</exception>
        <exception cref="T:Microsoft.Rtc.Signaling.RealTimeException">Thrown when the response cannot be sent for other reasons.</exception>
      </Docs>
    </Member>
    <Member MemberName="DialogContext">
      <MemberSignature Language="C#" Value="public Microsoft.Rtc.Signaling.SipDialogContext DialogContext { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Rtc.Signaling.SipDialogContext DialogContext" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Rtc.Signaling.OfferInReInviteEventArgs.DialogContext" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DialogContext As SipDialogContext" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Rtc::Signaling::SipDialogContext ^ DialogContext { Microsoft::Rtc::Signaling::SipDialogContext ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DialogContext : Microsoft.Rtc.Signaling.SipDialogContext" Usage="Microsoft.Rtc.Signaling.OfferInReInviteEventArgs.DialogContext" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Rtc.Collaboration</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Rtc.Signaling.SipDialogContext</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the dialog context.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EndAccept">
      <MemberSignature Language="C#" Value="public abstract Microsoft.Rtc.Signaling.SipRequestData EndAccept (IAsyncResult result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.Rtc.Signaling.SipRequestData EndAccept(class System.IAsyncResult result) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Rtc.Signaling.OfferInReInviteEventArgs.EndAccept(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function EndAccept (result As IAsyncResult) As SipRequestData" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract Microsoft::Rtc::Signaling::SipRequestData ^ EndAccept(IAsyncResult ^ result);" />
      <MemberSignature Language="F#" Value="abstract member EndAccept : IAsyncResult -&gt; Microsoft.Rtc.Signaling.SipRequestData" Usage="offerInReInviteEventArgs.EndAccept result" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Rtc.Collaboration</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Rtc.Signaling.SipRequestData</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="result">The reference to the pending asynchronous operation.</param>
        <summary>
            Waits for the pending BeginAccept operation to complete.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:Microsoft.Rtc.Signaling.RealTimeException">Thrown when the response cannot be sent for other reasons.</exception>
        <exception cref="T:Microsoft.Rtc.Signaling.OperationTimeoutException">Thrown when ack is not received.</exception>
        <exception cref="T:System.ArgumentException">Thrown when an incorrect result instance is passed.</exception>
      </Docs>
    </Member>
    <Member MemberName="EndDecline">
      <MemberSignature Language="C#" Value="public abstract Microsoft.Rtc.Signaling.SipRequestData EndDecline (IAsyncResult result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.Rtc.Signaling.SipRequestData EndDecline(class System.IAsyncResult result) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Rtc.Signaling.OfferInReInviteEventArgs.EndDecline(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function EndDecline (result As IAsyncResult) As SipRequestData" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract Microsoft::Rtc::Signaling::SipRequestData ^ EndDecline(IAsyncResult ^ result);" />
      <MemberSignature Language="F#" Value="abstract member EndDecline : IAsyncResult -&gt; Microsoft.Rtc.Signaling.SipRequestData" Usage="offerInReInviteEventArgs.EndDecline result" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Rtc.Collaboration</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Rtc.Signaling.SipRequestData</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="result">The reference to the pending asynchronous operation.</param>
        <summary>
            Waits for the pending BeginDecline operation to complete.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:Microsoft.Rtc.Signaling.RealTimeException">Thrown when the response cannot be sent for other reasons.</exception>
        <exception cref="T:Microsoft.Rtc.Signaling.OperationTimeoutException">Thrown when ack is not received.</exception>
      </Docs>
    </Member>
    <Member MemberName="Offer">
      <MemberSignature Language="C#" Value="public Microsoft.Rtc.Signaling.ContentDescription Offer { get; protected set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Rtc.Signaling.ContentDescription Offer" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Rtc.Signaling.OfferInReInviteEventArgs.Offer" />
      <MemberSignature Language="VB.NET" Value="Public Property Offer As ContentDescription" />
      <MemberSignature Language="C++ CLI" Value="public:  property Microsoft::Rtc::Signaling::ContentDescription ^ Offer {  public:&#xA;Microsoft::Rtc::Signaling::ContentDescription ^ get(); protected:&#xA; void set(Microsoft::Rtc::Signaling::ContentDescription ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Offer : Microsoft.Rtc.Signaling.ContentDescription with get, set" Usage="Microsoft.Rtc.Signaling.OfferInReInviteEventArgs.Offer" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Rtc.Collaboration</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Rtc.Signaling.ContentDescription</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the media description offer from the remote participant.
            </summary>
        <value>The offer.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReinviteRequestData">
      <MemberSignature Language="C#" Value="public Microsoft.Rtc.Signaling.SipRequestData ReinviteRequestData { get; protected set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Rtc.Signaling.SipRequestData ReinviteRequestData" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Rtc.Signaling.OfferInReInviteEventArgs.ReinviteRequestData" />
      <MemberSignature Language="VB.NET" Value="Public Property ReinviteRequestData As SipRequestData" />
      <MemberSignature Language="C++ CLI" Value="public:  property Microsoft::Rtc::Signaling::SipRequestData ^ ReinviteRequestData {  public:&#xA;Microsoft::Rtc::Signaling::SipRequestData ^ get(); protected:&#xA; void set(Microsoft::Rtc::Signaling::SipRequestData ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ReinviteRequestData : Microsoft.Rtc.Signaling.SipRequestData with get, set" Usage="Microsoft.Rtc.Signaling.OfferInReInviteEventArgs.ReinviteRequestData" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Rtc.Collaboration</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Rtc.Signaling.SipRequestData</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the RequestData containing the ReInviteRequest.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SendProvisionalResponse">
      <MemberSignature Language="C#" Value="public abstract void SendProvisionalResponse (int responseCode, System.Collections.Generic.IEnumerable&lt;Microsoft.Rtc.Signaling.SignalingHeader&gt; signalingHeaders);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SendProvisionalResponse(int32 responseCode, class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.Rtc.Signaling.SignalingHeader&gt; signalingHeaders) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Rtc.Signaling.OfferInReInviteEventArgs.SendProvisionalResponse(System.Int32,System.Collections.Generic.IEnumerable{Microsoft.Rtc.Signaling.SignalingHeader})" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub SendProvisionalResponse (responseCode As Integer, signalingHeaders As IEnumerable(Of SignalingHeader))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void SendProvisionalResponse(int responseCode, System::Collections::Generic::IEnumerable&lt;Microsoft::Rtc::Signaling::SignalingHeader ^&gt; ^ signalingHeaders);" />
      <MemberSignature Language="F#" Value="abstract member SendProvisionalResponse : int * seq&lt;Microsoft.Rtc.Signaling.SignalingHeader&gt; -&gt; unit" Usage="offerInReInviteEventArgs.SendProvisionalResponse (responseCode, signalingHeaders)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Rtc.Collaboration</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="responseCode" Type="System.Int32" />
        <Parameter Name="signalingHeaders" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.Rtc.Signaling.SignalingHeader&gt;" />
      </Parameters>
      <Docs>
        <param name="responseCode">The provisional response code.</param>
        <param name="signalingHeaders">The collection of signaling headers. Can be null.</param>
        <summary>
            Sends a provisional response synchronously.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">
            Thrown when called in an invalid state or a final response has already been sent.
            </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the response code is not a provisional response.</exception>
        <exception cref="T:Microsoft.Rtc.Signaling.RealTimeException">Thrown when an error occurred while sending the response.</exception>
      </Docs>
    </Member>
    <Member MemberName="Session">
      <MemberSignature Language="C#" Value="public Microsoft.Rtc.Signaling.SignalingSession Session { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Rtc.Signaling.SignalingSession Session" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Rtc.Signaling.OfferInReInviteEventArgs.Session" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Session As SignalingSession" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Rtc::Signaling::SignalingSession ^ Session { Microsoft::Rtc::Signaling::SignalingSession ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Session : Microsoft.Rtc.Signaling.SignalingSession" Usage="Microsoft.Rtc.Signaling.OfferInReInviteEventArgs.Session" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Rtc.Collaboration</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Rtc.Signaling.SignalingSession</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the signaling session associated with this event argument.
            </summary>
        <value>The signaling session.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>