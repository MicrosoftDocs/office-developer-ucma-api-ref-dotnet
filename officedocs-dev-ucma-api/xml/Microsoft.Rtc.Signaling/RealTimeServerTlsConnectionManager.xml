<Type Name="RealTimeServerTlsConnectionManager" FullName="Microsoft.Rtc.Signaling.RealTimeServerTlsConnectionManager">
  <TypeSignature Language="C#" Value="public class RealTimeServerTlsConnectionManager : Microsoft.Rtc.Signaling.RealTimeServerConnectionManager" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit RealTimeServerTlsConnectionManager extends Microsoft.Rtc.Signaling.RealTimeServerConnectionManager" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Rtc.Signaling.RealTimeServerTlsConnectionManager" />
  <TypeSignature Language="VB.NET" Value="Public Class RealTimeServerTlsConnectionManager&#xA;Inherits RealTimeServerConnectionManager" />
  <TypeSignature Language="C++ CLI" Value="public ref class RealTimeServerTlsConnectionManager : Microsoft::Rtc::Signaling::RealTimeServerConnectionManager" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Rtc.Collaboration</AssemblyName>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Microsoft.Rtc.Signaling.RealTimeServerConnectionManager</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            Provides advanced connection management for using endpoints.
            This class provides the same functionality as RealTimeConnectionManager
            and adds the ability to listen for incoming TLS connections.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RealTimeServerTlsConnectionManager (string certificateIssuerName, byte[] certificateSerialNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string certificateIssuerName, unsigned int8[] certificateSerialNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Rtc.Signaling.RealTimeServerTlsConnectionManager.#ctor(System.String,System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (certificateIssuerName As String, certificateSerialNumber As Byte())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; RealTimeServerTlsConnectionManager(System::String ^ certificateIssuerName, cli::array &lt;System::Byte&gt; ^ certificateSerialNumber);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Rtc.Collaboration</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="certificateIssuerName" Type="System.String" />
        <Parameter Name="certificateSerialNumber" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="certificateIssuerName">The issuer name of the certificate to be used.</param>
        <param name="certificateSerialNumber">The serial number of the certificate to be used.</param>
        <summary>
            Initializes this instance with default localhost name and given certificate information.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:Microsoft.Rtc.Signaling.RealTimeException">
            The local host name could not be retrieved for use in the contact header.
            </exception>
        <exception cref="T:System.ArgumentNullException">Thrown when a given argument is null.</exception>
        <exception cref="T:System.ArgumentException">Thrown when a given argument is empty.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RealTimeServerTlsConnectionManager (string localHost, string certificateIssuerName, byte[] certificateSerialNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string localHost, string certificateIssuerName, unsigned int8[] certificateSerialNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Rtc.Signaling.RealTimeServerTlsConnectionManager.#ctor(System.String,System.String,System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (localHost As String, certificateIssuerName As String, certificateSerialNumber As Byte())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; RealTimeServerTlsConnectionManager(System::String ^ localHost, System::String ^ certificateIssuerName, cli::array &lt;System::Byte&gt; ^ certificateSerialNumber);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Rtc.Collaboration</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="localHost" Type="System.String" />
        <Parameter Name="certificateIssuerName" Type="System.String" />
        <Parameter Name="certificateSerialNumber" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="localHost">The localHost to be used in the contact header.</param>
        <param name="certificateIssuerName">The issuer name of the certificate to be used.</param>
        <param name="certificateSerialNumber">The serial number of the certificate to be used.</param>
        <summary>
            Initializes this instance with given localhost and certificate information.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">Thrown when a given argument is null.</exception>
        <exception cref="T:System.ArgumentException">
            Thrown when a given argument is empty, or the localHost parameter cannot be used as a host URI, or the certificate information 
            given is not usable.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="AddToAllowedDomains">
      <MemberSignature Language="C#" Value="public bool AddToAllowedDomains (string newEntry);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool AddToAllowedDomains(string newEntry) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Rtc.Signaling.RealTimeServerTlsConnectionManager.AddToAllowedDomains(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddToAllowedDomains (newEntry As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool AddToAllowedDomains(System::String ^ newEntry);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Rtc.Collaboration</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newEntry" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="newEntry">The new entry to be added.</param>
        <summary>
            Adds a new entry into the list of allowed domains.
            </summary>
        <returns>Returns True if the entry was added. False, if the entry already exists.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">
            Thrown when MTLS is not enabled. MTLS can be enabled by setting <see cref="P:Microsoft.Rtc.Signaling.RealTimeServerTlsConnectionManager.NeedMutualTls" /> to true.
            </exception>
        <exception cref="T:System.ArgumentNullException">Thrown when the argument <paramref name="newEntry" /> is null.</exception>
      </Docs>
    </Member>
    <Member MemberName="AllowedDomains">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;string&gt; AllowedDomains { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IEnumerable`1&lt;string&gt; AllowedDomains" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Rtc.Signaling.RealTimeServerTlsConnectionManager.AllowedDomains" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AllowedDomains As IEnumerable(Of String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::IEnumerable&lt;System::String ^&gt; ^ AllowedDomains { System::Collections::Generic::IEnumerable&lt;System::String ^&gt; ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Rtc.Collaboration</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the list of domains allowed to make incoming connections.
            </summary>
        <value>To be added.</value>
        <remarks>
          <para>
            An empty list indicates that all domains are allowed.
            </para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnhancedKeyUsage">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;string&gt; EnhancedKeyUsage { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IEnumerable`1&lt;string&gt; EnhancedKeyUsage" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Rtc.Signaling.RealTimeServerTlsConnectionManager.EnhancedKeyUsage" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property EnhancedKeyUsage As IEnumerable(Of String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::IEnumerable&lt;System::String ^&gt; ^ EnhancedKeyUsage { System::Collections::Generic::IEnumerable&lt;System::String ^&gt; ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Rtc.Collaboration</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets a list of enhancedKeyUsage values that are required to 
            be present in the remote's certificate. 
            </summary>
        <value>To be added.</value>
        <remarks>
          <para> 
            An empty list indicates there are no enhanced key usage requirements.        
            </para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDestinationTuple">
      <MemberSignature Language="C#" Value="protected override Microsoft.Rtc.Internal.Sip.SipDestinationTuple GetDestinationTuple (Microsoft.Rtc.Signaling.SipTransportType transportType, string host, int port, Microsoft.Rtc.Signaling.AddressFamilyHint familyHint, string tlsTarget);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class Microsoft.Rtc.Internal.Sip.SipDestinationTuple GetDestinationTuple(valuetype Microsoft.Rtc.Signaling.SipTransportType transportType, string host, int32 port, valuetype Microsoft.Rtc.Signaling.AddressFamilyHint familyHint, string tlsTarget) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Rtc.Signaling.RealTimeServerTlsConnectionManager.GetDestinationTuple(Microsoft.Rtc.Signaling.SipTransportType,System.String,System.Int32,Microsoft.Rtc.Signaling.AddressFamilyHint,System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function GetDestinationTuple (transportType As SipTransportType, host As String, port As Integer, familyHint As AddressFamilyHint, tlsTarget As String) As SipDestinationTuple" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override Microsoft::Rtc::Internal::Sip::SipDestinationTuple ^ GetDestinationTuple(Microsoft::Rtc::Signaling::SipTransportType transportType, System::String ^ host, int port, Microsoft::Rtc::Signaling::AddressFamilyHint familyHint, System::String ^ tlsTarget);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Rtc.Collaboration</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Rtc.Internal.Sip.SipDestinationTuple</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="transportType" Type="Microsoft.Rtc.Signaling.SipTransportType" />
        <Parameter Name="host" Type="System.String" />
        <Parameter Name="port" Type="System.Int32" />
        <Parameter Name="familyHint" Type="Microsoft.Rtc.Signaling.AddressFamilyHint" />
        <Parameter Name="tlsTarget" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="transportType">The transport type for the connection.</param>
        <param name="host">The host name to connect to.</param>
        <param name="port">The port for the connection.</param>
        <param name="familyHint">Address family hint.</param>
        <param name="tlsTarget">The tls target. Used for Tls only.</param>
        <summary>
            Get the tuple needed to make the connection.
            </summary>
        <returns>The tuple.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ListenForIncomingConnections">
      <MemberSignature Language="C#" Value="protected override System.Net.IPEndPoint ListenForIncomingConnections (System.Net.IPEndPoint ipEndpoint);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Net.IPEndPoint ListenForIncomingConnections(class System.Net.IPEndPoint ipEndpoint) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Rtc.Signaling.RealTimeServerTlsConnectionManager.ListenForIncomingConnections(System.Net.IPEndPoint)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Net::IPEndPoint ^ ListenForIncomingConnections(System::Net::IPEndPoint ^ ipEndpoint);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Rtc.Collaboration</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.IPEndPoint</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ipEndpoint" Type="System.Net.IPEndPoint" />
      </Parameters>
      <Docs>
        <param name="ipEndpoint">The ip endpoint to be used for listening.</param>
        <summary>
            This method does the actual S4 listening.
            </summary>
        <returns>The listening endpoint.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NeedMutualTls">
      <MemberSignature Language="C#" Value="public bool NeedMutualTls { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool NeedMutualTls" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Rtc.Signaling.RealTimeServerTlsConnectionManager.NeedMutualTls" />
      <MemberSignature Language="VB.NET" Value="Public Property NeedMutualTls As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool NeedMutualTls { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Rtc.Collaboration</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets or sets whether a mutual TLS connection is required for outgoing TLS connections.
            </summary>
        <value>To be added.</value>
        <remarks>
          <para>
            If the certificate information was not set, then this flag cannot be set to true.
            Turning off Mutual TLS will clear the allowed domains list.
            Turning on Mutual TLS will initialize the allowed domains to contain just the local host.
            </para>
          <para />
        </remarks>
        <exception cref="T:System.InvalidOperationException">Thrown when the set operation is called for a connection manager that is not listening or does not have a certificate.</exception>
      </Docs>
    </Member>
    <Member MemberName="PoolFqdn">
      <MemberSignature Language="C#" Value="public string PoolFqdn { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string PoolFqdn" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Rtc.Signaling.RealTimeServerTlsConnectionManager.PoolFqdn" />
      <MemberSignature Language="VB.NET" Value="Public Property PoolFqdn As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ PoolFqdn { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Rtc.Collaboration</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets or sets the pool fqdn for this machine.
            </summary>
        <value>To be added.</value>
        <remarks>
          <para>If set, it will be used in the contact header. If not set, the contact
            header will be generated using default logic to parse pool fqdn from certificate subject.
            </para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveFromAllowedDomains">
      <MemberSignature Language="C#" Value="public bool RemoveFromAllowedDomains (string oldEntry);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool RemoveFromAllowedDomains(string oldEntry) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Rtc.Signaling.RealTimeServerTlsConnectionManager.RemoveFromAllowedDomains(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function RemoveFromAllowedDomains (oldEntry As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool RemoveFromAllowedDomains(System::String ^ oldEntry);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Rtc.Collaboration</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="oldEntry" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="oldEntry">The entry to be removed.</param>
        <summary>
            Removes an existing entry from the allowed domains list.
            </summary>
        <returns>Returns True if it was removed. False, if the entry does not exist.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">Thrown when the argument passed is null.</exception>
      </Docs>
    </Member>
    <Member MemberName="SetAllowedDomains">
      <MemberSignature Language="C#" Value="public void SetAllowedDomains (System.Collections.Generic.IEnumerable&lt;string&gt; allowedDomainsToSet);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetAllowedDomains(class System.Collections.Generic.IEnumerable`1&lt;string&gt; allowedDomainsToSet) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Rtc.Signaling.RealTimeServerTlsConnectionManager.SetAllowedDomains(System.Collections.Generic.IEnumerable{System.String})" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetAllowedDomains (allowedDomainsToSet As IEnumerable(Of String))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetAllowedDomains(System::Collections::Generic::IEnumerable&lt;System::String ^&gt; ^ allowedDomainsToSet);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Rtc.Collaboration</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="allowedDomainsToSet" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
      </Parameters>
      <Docs>
        <param name="allowedDomainsToSet">The list of allowed domains.</param>
        <summary>
             Sets the list of allowed domains. This represents the list of computers that are allowed to
             make incoming connections when mutual TLS is used. The subject or alternate subjects in the 
             certificate are matched against this list. Only computers that have a matching entry in this list
             will be allowed to make incoming connections.
            
             This can be set even while listening and will affect future incoming connections. 
             The domain check is done based on suffix match. So, it is important to use "." at the beginning for domains. 
             For example, ".microsoft.com" rather than "microsoft.com". If there is no leading ., then 
             it is assumed to be FQDN and a complete match will be performed.
             </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetDefaultTlsTuple">
      <MemberSignature Language="C#" Value="protected override void SetDefaultTlsTuple ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void SetDefaultTlsTuple() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Rtc.Signaling.RealTimeServerTlsConnectionManager.SetDefaultTlsTuple" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub SetDefaultTlsTuple ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void SetDefaultTlsTuple();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Rtc.Collaboration</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Set the default TlsCredentials for the core manager. This might be used by S4 when it needs
            Tls tuple for outgoing connection and one was not provided to it directly.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetEnhancedKeyUsage">
      <MemberSignature Language="C#" Value="public void SetEnhancedKeyUsage (System.Collections.Generic.ICollection&lt;string&gt; enhancedKeyUsageToSet);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetEnhancedKeyUsage(class System.Collections.Generic.ICollection`1&lt;string&gt; enhancedKeyUsageToSet) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Rtc.Signaling.RealTimeServerTlsConnectionManager.SetEnhancedKeyUsage(System.Collections.Generic.ICollection{System.String})" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetEnhancedKeyUsage (enhancedKeyUsageToSet As ICollection(Of String))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetEnhancedKeyUsage(System::Collections::Generic::ICollection&lt;System::String ^&gt; ^ enhancedKeyUsageToSet);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Rtc.Collaboration</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enhancedKeyUsageToSet" Type="System.Collections.Generic.ICollection&lt;System.String&gt;" />
      </Parameters>
      <Docs>
        <param name="enhancedKeyUsageToSet">The enhanced key usage list.</param>
        <summary>
            Sets the list of allowed keys in the certificate of the remote host. This can
            be set event while listening and will affect future incoming connections.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetLocalCertificate">
      <MemberSignature Language="C#" Value="public override void SetLocalCertificate (string certificateIssuerName, byte[] certificateSerialNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void SetLocalCertificate(string certificateIssuerName, unsigned int8[] certificateSerialNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Rtc.Signaling.RealTimeServerTlsConnectionManager.SetLocalCertificate(System.String,System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub SetLocalCertificate (certificateIssuerName As String, certificateSerialNumber As Byte())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void SetLocalCertificate(System::String ^ certificateIssuerName, cli::array &lt;System::Byte&gt; ^ certificateSerialNumber);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Rtc.Collaboration</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="certificateIssuerName" Type="System.String" />
        <Parameter Name="certificateSerialNumber" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="certificateIssuerName">The issuer name of the certificate to be used.</param>
        <param name="certificateSerialNumber">The serial number of the certificate to be used.</param>
        <summary>
            Sets the local certificate information. This is used for mutual TLS authentication when needed.
            If mutual TLS is not used, there is no need to set these values.
            The certificate is retrieved from the certificate store on the local computer.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StopListeningForIncomingConnections">
      <MemberSignature Language="C#" Value="protected override void StopListeningForIncomingConnections ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void StopListeningForIncomingConnections() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Rtc.Signaling.RealTimeServerTlsConnectionManager.StopListeningForIncomingConnections" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub StopListeningForIncomingConnections ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void StopListeningForIncomingConnections();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Rtc.Collaboration</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            This method does the actual S4 stop for listening.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>