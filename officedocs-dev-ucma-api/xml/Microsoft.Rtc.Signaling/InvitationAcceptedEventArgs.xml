<Type Name="InvitationAcceptedEventArgs" FullName="Microsoft.Rtc.Signaling.InvitationAcceptedEventArgs">
  <TypeSignature Language="C#" Value="public class InvitationAcceptedEventArgs : Microsoft.Rtc.Signaling.SipResponseReceivedEventArgs" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit InvitationAcceptedEventArgs extends Microsoft.Rtc.Signaling.SipResponseReceivedEventArgs" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Rtc.Signaling.InvitationAcceptedEventArgs" />
  <TypeSignature Language="VB.NET" Value="Public Class InvitationAcceptedEventArgs&#xA;Inherits SipResponseReceivedEventArgs" />
  <TypeSignature Language="C++ CLI" Value="public ref class InvitationAcceptedEventArgs : Microsoft::Rtc::Signaling::SipResponseReceivedEventArgs" />
  <TypeSignature Language="F#" Value="type InvitationAcceptedEventArgs = class&#xA;    inherit SipResponseReceivedEventArgs" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Rtc.Collaboration</AssemblyName>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Microsoft.Rtc.Signaling.SipResponseReceivedEventArgs</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            Represents the class used when InvitationAccepted event is raised.
            This gives access to the headers in the response in addition
            to informing the appplication that the invitation has been accepted.
            The headers exposed in this event are the same as the one returned
            when the application calls the EndEnter methods to fetch headers.
            If the application registers for this event, it is responsible 
            for sending the acknowledgement in a timely manner. If the application
            does not send Ack, the platform will send it when the application returns
            from this event. 
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="DelayAck">
      <MemberSignature Language="C#" Value="public bool DelayAck { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool DelayAck" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Rtc.Signaling.InvitationAcceptedEventArgs.DelayAck" />
      <MemberSignature Language="VB.NET" Value="Public Property DelayAck As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool DelayAck { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.DelayAck : bool with get, set" Usage="Microsoft.Rtc.Signaling.InvitationAcceptedEventArgs.DelayAck" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Rtc.Collaboration</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets or sets the value to indicate whether the ack should be delayed. If delayed, the application
            is responsible for sending the acknowledgement later.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">Thrown when set to true and original offer was null.</exception>
      </Docs>
    </Member>
    <Member MemberName="DialogContext">
      <MemberSignature Language="C#" Value="public Microsoft.Rtc.Signaling.SipDialogContext DialogContext { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Rtc.Signaling.SipDialogContext DialogContext" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Rtc.Signaling.InvitationAcceptedEventArgs.DialogContext" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DialogContext As SipDialogContext" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Rtc::Signaling::SipDialogContext ^ DialogContext { Microsoft::Rtc::Signaling::SipDialogContext ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DialogContext : Microsoft.Rtc.Signaling.SipDialogContext" Usage="Microsoft.Rtc.Signaling.InvitationAcceptedEventArgs.DialogContext" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Rtc.Collaboration</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Rtc.Signaling.SipDialogContext</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the dialog context that was accepted.
            </summary>
        <value>To be added.</value>
        <remarks>
          <para>
            For renegotiations on established sessions, this property is alwasy null.
            </para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsNullOriginalOffer">
      <MemberSignature Language="C#" Value="public bool IsNullOriginalOffer { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsNullOriginalOffer" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Rtc.Signaling.InvitationAcceptedEventArgs.IsNullOriginalOffer" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsNullOriginalOffer As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsNullOriginalOffer { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsNullOriginalOffer : bool" Usage="Microsoft.Rtc.Signaling.InvitationAcceptedEventArgs.IsNullOriginalOffer" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Rtc.Collaboration</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the flag indicating if the original offer was null or not.
            If the original offer was null, the application cannot send 
            Acknowledgement using this event argument.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SendAcknowledgement">
      <MemberSignature Language="C#" Value="public void SendAcknowledgement (System.Collections.Generic.IEnumerable&lt;Microsoft.Rtc.Signaling.SignalingHeader&gt; signalingHeadersToAdd);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SendAcknowledgement(class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.Rtc.Signaling.SignalingHeader&gt; signalingHeadersToAdd) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Rtc.Signaling.InvitationAcceptedEventArgs.SendAcknowledgement(System.Collections.Generic.IEnumerable{Microsoft.Rtc.Signaling.SignalingHeader})" />
      <MemberSignature Language="VB.NET" Value="Public Sub SendAcknowledgement (signalingHeadersToAdd As IEnumerable(Of SignalingHeader))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SendAcknowledgement(System::Collections::Generic::IEnumerable&lt;Microsoft::Rtc::Signaling::SignalingHeader ^&gt; ^ signalingHeadersToAdd);" />
      <MemberSignature Language="F#" Value="member this.SendAcknowledgement : seq&lt;Microsoft.Rtc.Signaling.SignalingHeader&gt; -&gt; unit" Usage="invitationAcceptedEventArgs.SendAcknowledgement signalingHeadersToAdd" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Rtc.Collaboration</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="signalingHeadersToAdd" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.Rtc.Signaling.SignalingHeader&gt;" />
      </Parameters>
      <Docs>
        <param name="signalingHeadersToAdd">The signaling headers to add. Can be null.</param>
        <summary>
            Sends an acknowledgement for the remote that just accepted the invitation.
            The acknowledgement should be sent as soon as possible to avoid
            the remote from timing out the invitation. This method does not wait
            for the acknowledgement to be actually sent on the wire. The application
            should use the invite operation for this purpose.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">Thrown when the operation already timedout or ack already sent or when original offer was null.</exception>
      </Docs>
    </Member>
  </Members>
</Type>